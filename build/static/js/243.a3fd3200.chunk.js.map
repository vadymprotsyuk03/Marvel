{"version":3,"file":"static/js/243.a3fd3200.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic()\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, \r\n        method = 'GET', \r\n        body = null, \r\n        headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=84ec864cead8868f50d8705b26b1c990';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: \"There is no description for this character\",\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t};\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t};\r\n};\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","View","_ref","comic","title","description","pageCount","thumbnail","language","price","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}